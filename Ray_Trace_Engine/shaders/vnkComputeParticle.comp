#version 450

struct Particle {
	vec4 position;
	vec4 velocity;
  vec4 color;
};

//layout (binding = 0) uniform ParameterUBO {
//    float deltaTime;
//} ubo;

////

layout(push_constant) uniform PushConstantValue {
		float deltaTime;
    float initFlag;
} pushValue;

layout(std140, binding = 0) readonly buffer ParticleSSBOIn {
   Particle particlesIn[ ];
};

layout(std140, binding = 1) buffer ParticleSSBOOut {
   Particle particlesOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() 
{
    uint index = gl_GlobalInvocationID.x;  

    Particle particleIn = particlesIn[index];

    if(pushValue.initFlag == 0.0f){
        particlesOut[index].position =
        particleIn.position + vec4(particleIn.velocity.xyz, 1.0f) * pushValue.deltaTime;
        particlesOut[index].velocity = particleIn.velocity;
        return;
    }

    
    particlesOut[index].position = particleIn.position;

    particlesOut[index].velocity = particleIn.velocity;

   // Flip movement at window border
   //if ((particlesOut[index].position.x <= -1.0) || (particlesOut[index].position.x >= 1.0)) {
   //    particlesOut[index].velocity.x *= -particlesOut[index].velocity.x;
   //}
   //if ((particlesOut[index].position.y <= -1.0) || (particlesOut[index].position.y >= 1.0)) {
   //    particlesOut[index].velocity.y *= -particlesOut[index].velocity.y;
   //}
  // if ((particlesOut[index].position.z <= -1.0) || (particlesOut[index].position.z >= 1.0)) {
  //     particlesOut[index].velocity.y = -particlesOut[index].velocity.y;
  // }
}